/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockAggregatorInterface extends ethers.utils.Interface {
  functions: {
    "latestAnswer()": FunctionFragment;
    "setAnswer(int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnswer",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAnswer", data: BytesLike): Result;

  events: {
    "AnswerUpdated(int256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnswerUpdated"): EventFragment;
}

export class MockAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockAggregatorInterface;

  functions: {
    latestAnswer(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "latestAnswer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setAnswer(
      a: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAnswer(int256)"(
      a: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

  setAnswer(
    a: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAnswer(int256)"(
    a: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAnswer(a: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setAnswer(int256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      timestamp: null
    ): EventFilter;
  };

  estimateGas: {
    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAnswer(a: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setAnswer(int256)"(
      a: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnswer(
      a: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAnswer(int256)"(
      a: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
